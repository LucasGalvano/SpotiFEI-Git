package View;

import DAO.PlaylistDAO;
import DAO.MusicaDAO;
import Model.Playlist;
import Model.Musica;
import javax.swing.*;
import java.awt.*;
import java.sql.SQLException;
import java.util.List;

public class PlaylistFrame extends JFrame {
    private PlaylistDAO playlistDAO;
    private int userId;
    private DefaultListModel<String> model;
    private JList<String> list;
    private List<Playlist> listaPlaylists;

    public PlaylistFrame(PlaylistDAO playlistDAO, int userId) {
        this.playlistDAO = playlistDAO;
        this.userId = userId;

        setTitle("Minhas Playlists");
        setSize(400, 550);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        JLabel titulo = new JLabel("Playlists", SwingConstants.CENTER);
        titulo.setFont(new Font("Arial", Font.BOLD, 20));
        add(titulo, BorderLayout.NORTH);

        model = new DefaultListModel<>();
        list = new JList<>(model);
        JScrollPane scroll = new JScrollPane(list);
        add(scroll, BorderLayout.CENTER);

        JPanel botoes = new JPanel();
        JButton bt_nova_playlist = new JButton("Criar Playlist");
        JButton bt_excluir_playlist = new JButton("Excluir Playlist");
        JButton bt_ver_musicas = new JButton("Ver Músicas");
        botoes.add(bt_nova_playlist);
        botoes.add(bt_excluir_playlist);
        botoes.add(bt_ver_musicas);
        add(botoes, BorderLayout.SOUTH);

        bt_nova_playlist.addActionListener(e -> {
            String nome = JOptionPane.showInputDialog(this, "Nome da nova playlist:");
            if (nome != null && !nome.trim().isEmpty()) {
                try {
                    playlistDAO.criarPlaylist(userId, nome.trim());
                    carregarPlaylists();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage());
                }
            }
        });

        bt_excluir_playlist.addActionListener(e -> {
            String nome = list.getSelectedValue();
            if (nome != null) {
                int confirm = JOptionPane.showConfirmDialog(this, "Excluir playlist '" + nome + "'?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        playlistDAO.excluirPlaylist(userId, nome);
                        carregarPlaylists();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage());
                    }
                }
            }
        });

        bt_ver_musicas.addActionListener(e -> {
            int index = list.getSelectedIndex();
            if (index >= 0) {
                Playlist selecionada = listaPlaylists.get(index);
                JFrame frameMusicas = new JFrame("Músicas da Playlist");
                frameMusicas.setSize(400, 400);
                frameMusicas.setLayout(new BorderLayout());

                DefaultListModel<String> modeloMusicas = new DefaultListModel<>();
                JList<String> listaMusicas = new JList<>(modeloMusicas);
                JScrollPane scrollMusicas = new JScrollPane(listaMusicas);
                frameMusicas.add(scrollMusicas, BorderLayout.CENTER);

                try {
                    List<Musica> musicas = playlistDAO.verPlaylist(selecionada.getPlaylistId());
                    for (Musica m : musicas) {
                        modeloMusicas.addElement(m.getNomeMusica() + " - " + m.getArtista());
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao buscar músicas: " + ex.getMessage());
                }

                frameMusicas.setVisible(true);
            }
        });

        carregarPlaylists();
        setVisible(true);
    }

    private void carregarPlaylists() {
        model.clear();
        try {
            listaPlaylists = playlistDAO.playlistUsuario(userId);
            for (Playlist p : listaPlaylists) {
                model.addElement(p.getNomePlaylist());
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar playlists: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
